**yadg** `DataTree`
```````````````````
The :class:`datatree.DataTree` objects generated by **yadg** are structured and annotated representations of raw data. Here, "raw data" strictly denotes the data present in the parsed files, as they come out of an instrument directly. It may therefore also contain derived data (e.g. data processed using a calibration curve in chromatography, or a more involved transformation in electrochemistry), while referring to them as "raw data", since they are present in the parsed files.

The :class:`~datatree.DataTree` is designed to be a FAIR representation of the parsed files, with:

    - uncertainties of measured datapoints;
    - units associated with data;
    - a consistent data structure for timestamped traces;
    - a standardised layout for original metadata contained in the parsed files,
    - a consistent variable mapping between different filetypes.

Additionally, the :class:`~datatree.DataTree` is annotated by **yadg**-specific metadata, including:

    - version information;
    - clear provenance of the data;
    - uniform data timestamping within and between all :class:`DataTrees`.

As of ``yadg-5.0``, the :class:`~datatree.DataTree` can be exported as a |NetCDF|_ file, using HDF5 groups to store individual `steps`. In memory, the individual `steps` are nodes the :class:`~datatree.DataTree`, containing a :class:`xarray.Dataset`.

The top level :class:`datatree.DataTree` contains the following metadata stored in its attributes:

    - the version of **yadg** and the execution command used to generate the `datagram`;
    - a copy of the `dataschema` used to created the `datagram`;
    - the version of the `datagram`; and
    - the `datagram` creation timestamp formatted according to ISO8601.

The contents of the attribute fields for each `step` will vary depending on the `extractor` used to create the corresponding :class:`~datatree.DataTree` node. The following conventions are used:

    - a `coord` field ``uts`` contains a Unix timestamp (:class:`float`),
    - uncertainties for entries in `data_vals` are stored using separate entries with names composed as ``f"{entry}_std_err"``

       - the parent ``f"{entry}"`` is pointing to its uncertainty by annotation using the ``ancillary_variables`` field,
       - the uncertainty links back to the ``f"{entry}"`` by annotation using the ``standard_name`` field.

    - the use of spaces (and other whitespace characters) in the names of entries is to be avoided,
    - the use of forward slashes (``/``) in the names of entries is not allowed,
    - metadata present in the original files is stored in ``.attrs["original_metadata"]``, using json serialisation.

This follows the `NetCDF CF Metadata Conventions <https://cfconventions.org/Data/cf-conventions/cf-conventions-1.10/cf-conventions.html>`_, see `Section 3.4 on Ancillary Data <https://cfconventions.org/Data/cf-conventions/cf-conventions-1.10/cf-conventions.html#ancillary-data>`_.

.. _NetCDF: https://www.unidata.ucar.edu/software/netcdf/

.. |NetCDF| replace:: ``NetCDF``
